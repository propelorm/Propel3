// check that the columns of the main class are already added (if this is the primary ModelCriteria)
if (!$this->hasSelectClause() && !$this->getPrimaryCriteria()) {
    $this->addSelfSelectFields();
}
$this->configureSelectFields();

$dbMap = $this->getConfiguration()->getDatabase($this->getDbName());

$con = $this->getConfiguration()->getConnectionManager($this->getDbName())->getReadConnection();
$adapter = $this->getConfiguration()->getAdapter($this->getDbName());

$key = $this->getQueryKey();
if ($key && $this->cacheContains($key)) {
    $params = $this->getParams();
    $sql = $this->cacheFetch($key);
} else {
    $params = array();
    $sql = $this->createSelectSql($params);
}

try {
    $stmt = $con->prepare($sql);
    $p = [];
    foreach ($params as $param) {
        $p[] = $param['value'];
    }
    $this->getConfiguration()->debug("doSelect() sql: $sql [" . implode(',', $p). "]");
    $adapter->bindValues($stmt, $params, $dbMap);
    $stmt->execute();
} catch (\Exception $e) {
    if (isset($stmt)) {
        $stmt = null; // close
    }
    $this->getConfiguration()->log($e->getMessage(), Configuration::LOG_ERR);
    throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), null, $e);
}

if ($key && !$this->cacheContains($key)) {
    $this->cacheStore($key, $sql);
}

return $con->getDataFetcher($stmt);